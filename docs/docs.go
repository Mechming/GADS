// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/configuration/build-image": {
            "post": {
                "description": "Starts building the 'ios-appium' image in a goroutine and just returns Accepted",
                "tags": [
                    "configuration"
                ],
                "summary": "Build 'ios-appium' image",
                "responses": {
                    "202": {
                        "description": ""
                    }
                }
            }
        },
        "/configuration/remove-image": {
            "post": {
                "description": "Removes the 'ios-appium' Docker image",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Remove 'ios-appium' image",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorJSON"
                        }
                    }
                }
            }
        },
        "/configuration/remove-ios-listener": {
            "post": {
                "description": "Deletes udev rules from /etc/udev/rules.d and reloads udev",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Removes iOS device listener",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorJSON"
                        }
                    }
                }
            }
        },
        "/configuration/set-sudo-password": {
            "put": {
                "description": "Sets your sudo password in ./env.json. The password is needed for operations requiring elevated permissions like setting up udev.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Set sudo password",
                "parameters": [
                    {
                        "description": "Sudo password value",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.SudoPassword"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorJSON"
                        }
                    }
                }
            }
        },
        "/configuration/setup-ios-listener": {
            "post": {
                "description": "Creates udev rules, moves them to /etc/udev/rules.d and reloads udev. Copies usbmuxd.service to /lib/systemd/system and enables it",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Sets up iOS device listener",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorJSON"
                        }
                    }
                }
            }
        },
        "/configuration/update-config": {
            "put": {
                "description": "Updates one  or multiple configuration values",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "configuration"
                ],
                "summary": "Update project configuration",
                "parameters": [
                    {
                        "description": "Update config",
                        "name": "config",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/main.ProjectConfig"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorJSON"
                        }
                    }
                }
            }
        },
        "/containers/{container_id}/logs": {
            "post": {
                "description": "Get logs of container by providing container ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "Get container logs",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorJSON"
                        }
                    }
                }
            }
        },
        "/containers/{container_id}/remove": {
            "post": {
                "description": "Removes container by provided container ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "Remove container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorJSON"
                        }
                    }
                }
            }
        },
        "/containers/{container_id}/restart": {
            "post": {
                "description": "Restarts container by provided container ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "containers"
                ],
                "summary": "Restart container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Container ID",
                        "name": "container_id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorJSON"
                        }
                    }
                }
            }
        },
        "/device-logs/{log_type}/{device_udid}": {
            "get": {
                "description": "Get logs by type",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "device-logs"
                ],
                "summary": "Get logs for iOS device container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Log Type",
                        "name": "log_type",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Device UDID",
                        "name": "device_udid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    }
                }
            }
        },
        "/ios_containers/update": {
            "post": {
                "description": "Creates (or removes respectively) iOS containers based on the connected and registered devices",
                "tags": [
                    "ios-devices"
                ],
                "summary": "Update iOS containers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UDID",
                        "name": "device_udid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "202": {
                        "description": ""
                    }
                }
            }
        },
        "/ios_containers/{device_udid}/create": {
            "post": {
                "description": "Creates a docker container for iOS device for provided device UDID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ios-devices"
                ],
                "summary": "Create iOS container",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UDID",
                        "name": "device_udid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/main.SimpleResponseJSON"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/main.ErrorJSON"
                        }
                    }
                }
            }
        },
        "/project-logs": {
            "get": {
                "description": "Provides project logs as plain text response",
                "tags": [
                    "project-logs"
                ],
                "summary": "Get project logs",
                "responses": {
                    "200": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "main.ErrorJSON": {
            "type": "object",
            "properties": {
                "error_message": {
                    "type": "string"
                },
                "event": {
                    "type": "string"
                }
            }
        },
        "main.ProjectConfig": {
            "type": "object",
            "properties": {
                "devices_host": {
                    "type": "string"
                },
                "selenium_hub_host": {
                    "type": "string"
                },
                "selenium_hub_port": {
                    "type": "string"
                },
                "selenium_hub_protocol_type": {
                    "type": "string"
                },
                "wda_bundle_id": {
                    "type": "string"
                }
            }
        },
        "main.SimpleResponseJSON": {
            "type": "object",
            "properties": {
                "event": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                }
            }
        },
        "main.SudoPassword": {
            "type": "object",
            "properties": {
                "sudo_password": {
                    "type": "string"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
